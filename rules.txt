Field 40x30
divide in 4 logical parts 
++++++++++++++++++
+       +        +
++++++++++++++++++ 
+       +        +
++++++++++++++++++

------------------------
Field representation: 
one dimensioned array(at the moment of p)
[0]->->->->->->->->->
->->->->->->->->->->
->->->->->->->->->->
->->->->->->->->->->
->->->->->->->->[299]
30
-----------------------


Entities code representations:
Wall		0xFF
Dots 		0xAA
Player		0x22

-----------------------------------------------------------------------------------------------------------

players moves constantly (like a snake)
Inside each sector boundary(generated symmetrically) according to the x axis
If they crash border -> just stop one wait next move
If 2 players crash -> they just wait for one player to move
The whole field is filled with eatable dots or borders

The app should perform both server and client processes
server decides how many players are there while client just enters lobby and waits(no info about other players)
Messages: The map generation lies on the server
Which info is given from server to client:
----------------------------------------------------------------------------------------------------------
Server				Client
----------------------------------------------------------------------------------------------------------
				<-connect 
send map->
				<-ready
start game->

Keys->				<-Keys

----------------------------------------------------------------------------------------------------------

When game is over all clients should be informed that the game is over
If 3 out 4 clients consider one opinion on the winner -> 
	the opinion of the client with unpopular (1 out 4) opinion will be rejected
THE GAME SHOULD FINISH FOR ALL PLAYERS SIMULTANEOUSLY

max case: 4 players specials
server decides which part is given to client
each client should be informed who other players are(clients/server)
----------------------------------------------------------------------------------------------------------
Server							Client(s)
----------------------------------------------------------------------------------------------------------
server waits for ALL players to connect			<-connect 
verify xN(N is amount of playrs)			<-connect
-> -> -> ->						<-connect
					 		<-connect
send map + client info[i]->	
							<-ready
							<-ready
							<-ready
							<-ready
start game->


Keys(verification of income keys + own outcome keys)->	<-Keys
							<-Keys
							<-Keys
							<-Keys

---------------------------------------------------------------------------------------------------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++
+			+			+			+	+			+
+	uint32_t	+	uint32_t	+	uint32_t	+	+	uint8_t*	+
+	magic		+	ptype		+	datasize	+	+	data		+
+               	+	package_t	+			+	+			+
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++

players should exchange with the message
0xabcdfe01 - magic

1. server should identify itself (by server's player)
	if meets same name -> rejects the client with this certain name
2. if client connets it doesnt mean he is a valid player
2. to verify client as a player he should posses a package(magic) (identifier)
3. client should send a proper package to become a player(if playername[] size ovrflow client is rejected)
4. clients decides by its own if the game is over

PACKAGES:

1) ptype == 1 (connection)

				header 
-------------------------------------------------------------------------        H = {start_x, start_y, start_direction, namelen, name}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++
+			+			+			+	+			+
+	magic		+	    1		+     datasize < 256	+	+  (char *player_name)	+
+	number		+			+    len == datasize	+	+	data		+
+               	+			+			+	+			+
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++

2) ptype == 16 (starting state)	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++
+			+			+			+	+			+
+	magic		+	    16		+			+	+  	map		+
+	number		+			+    len == datasize	+	+	20 x 15 x 1	+
+               	+			+			+	+			+
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++

3) ptype == 2 (client ready)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++
+			+			+			+	+			+
+	magic		+	    2		+			+	+  	   0		+
+	number		+			+    len == datasize	+	+			+
+               	+			+			+	+			+
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++

4) ptype == 0x20 (start game)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++
+			+			+			+	+	start_x		+
+	magic		+	    0x20	+			+	+	start_y 	+
+	number		+			+    len == datasize	+	+	start_dir	+
+               	+			+			+	+   name_len	name	+
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++

5)
UP	0
DOWN	2
LEFT	3
RIGHT	1
ptype == 0
Client[i] -> Server
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++
+			+			+			+	+			+
+	magic		+	    0		+			+	+  KEY={1, 2, 0, 3, 1}	+
+	number		+			+    len == 13 bytes	+	+			+
+               	+			+			+	+			+
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++

6)
ptype == -1 (0xFFFFFFFF)
BROADCAST: Server -> Client[i-j]
server informs ALL players if has got a 6.1 Package
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++
+			+			+			+	+			+
+	magic		+	    -1		+	key		+	+  	  name 		+
+	number		+			+    			+	+			+
+               	+			+			+	+			+
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	+++++++++++++++++++++++++


uint32_t player_count
struct player[player_count]
uint32_t frame_timeout

(each player obtains this structure to be identified and hadled properly by other players)
struct player {
	uint32_t start_x;
	uint32_t start_y;
	uint32_t player_name_len;
	uint8_t name[];
} 


---------------------------------------------------------------------------------------------------------

Field
Client should get only a quarter 1/4 of a field and then multiply it symmetrically on its own
1.network order htonl
UP = 0
DOWN = 2
left = 3
right = 1
from the socket comes only 0-3


connectioin stage package ptype 1
solution 1
struct payer {
	char name[256];
	startx
	starty
	start_ir
	name len
	nmame;
}

solution 2
struct player {

	char* name; -> heap (copy it to the buffer before)
			
}
